generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

enum UserRole {
    ADMIN
    LECTURER
    STUDENT
}

enum TokenType {
    PASSWORD_RESET
    ACCOUNT_ACTIVATION
}

enum Gender {
    MALE
    FEMALE
}

enum StudentStatus {
    ACTIVE
    SUSPENDED
    WITHDRAWN
    GRADUATED
    DEFERRED
}

enum Semester {
    HARMATTAN
    RAIN
    ACADEMIC_YEAR
}

enum LecturerRole {
    DEAN
    HOD
    LECTURER
    PART_ADVISER
}

enum FileCategory {
    RESULTS
    USER_DATA
    OTHER
}

enum EnrollmentStatus {
    PASSED
    FAILED
    ENROLLED
    ABSENT
}

enum Level {
    LVL_100
    LVL_200
    LVL_300
    LVL_400
    LVL_500
    LVL_600
    LVL_700
}

model User {
    id        String    @id @default(uuid())
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?

    email    String   @unique
    password String?
    role     UserRole

    admin    Admin?
    lecturer Lecturer?
    student  Student?
    tokens   Token?

    @@map("users")
}

model Token {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())

    token     String    @unique
    tokenType TokenType
    expiresAt DateTime

    userId String @unique
    user   User   @relation(fields: [userId], references: [id])

    @@index([expiresAt])
    @@index([token])
    @@map("tokens")
}

model Admin {
    id        String    @id @default(uuid())
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?

    name  String
    phone String?

    userId String @unique
    user   User   @relation(fields: [userId], references: [id])

    @@index([deletedAt])
    @@map("admin")
}

model Lecturer {
    id        String    @id @default(uuid())
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?

    firstName     String
    lastName      String
    otherName     String?
    phone         String? @unique
    title         String?
    qualification String?

    userId       String                @unique
    user         User                  @relation(fields: [userId], references: [id])
    departmentId String
    department   Department            @relation(fields: [departmentId], references: [id])
    designations LecturerDesignation[]
    courseLinks  CourseLecturer[]
    files        File[]

    @@index([departmentId])
    @@index([deletedAt])
    @@map("lecturers")
}

model LecturerDesignation {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())

    entity String
    role   LecturerRole

    lecturerId String
    lecturer   Lecturer @relation(fields: [lecturerId], references: [id])

    @@unique([entity, role], name: "designation")
    @@index([role])
    @@map("lecturer_designations")
}

model Student {
    id        String    @id @default(uuid())
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?

    matricNumber  String        @unique
    firstName     String
    lastName      String
    otherName     String?
    admissionYear String
    level         Level
    gender        Gender
    degree        String
    status        StudentStatus @default(ACTIVE)

    userId       String     @unique
    user         User       @relation(fields: [userId], references: [id])
    departmentId String
    department   Department @relation(fields: [departmentId], references: [id])

    enrollments Enrollment[]

    @@index([departmentId])
    @@index([level])
    @@index([status])
    @@index([matricNumber])
    @@index([deletedAt])
    @@index([departmentId, level])
    @@index([departmentId, status])
    @@map("students")
}

model Faculty {
    id        String    @id @default(uuid())
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?

    name String @unique @db.VarChar(255)

    departments Department[]

    @@index([deletedAt])
    @@map("faculties")
}

model Department {
    id        String    @id @default(uuid())
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?

    name     String @unique
    maxLevel Level

    facultyId String
    faculty   Faculty @relation(fields: [facultyId], references: [id])

    lecturers            Lecturer[]
    students             Student[]
    courseDeptsAndLevels CourseSesnDeptAndLevel[]
    courses              Course[]

    @@index([facultyId])
    @@index([deletedAt])
    @@map("departments")
}

model Session {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    academicYear String   @unique @db.VarChar(50)
    startDate    DateTime
    endDate      DateTime

    courseSessions CourseSession[]

    @@map("sessions")
}

model Course {
    id        String    @id @default(uuid())
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?

    code        String   @unique
    title       String
    description String
    units       Int      @db.SmallInt
    semester    Semester

    departmentId String?
    department   Department? @relation(fields: [departmentId], references: [id])

    courseSessions CourseSession[]

    @@index([deletedAt])
    @@map("courses")
}

model CourseSession {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    isApproved  Boolean   @default(false)
    approvedAt  DateTime?
    isPublished Boolean   @default(false)
    publishedAt DateTime?

    courseId  String
    course    Course  @relation(fields: [courseId], references: [id])
    sessionId String
    session   Session @relation(fields: [sessionId], references: [id])

    lecturers      CourseLecturer[]
    enrollments    Enrollment[]
    deptsAndLevels CourseSesnDeptAndLevel[]

    @@unique([courseId, sessionId], name: "uniqueCourseSession")
    @@index([courseId])
    @@index([sessionId])
    @@map("course_sessions")
}

model CourseLecturer {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    isCoordinator Boolean @default(false)

    courseSessionId String
    courseSession   CourseSession @relation(fields: [courseSessionId], references: [id])
    lecturerId      String
    lecturer        Lecturer      @relation(fields: [lecturerId], references: [id])

    @@unique([courseSessionId, lecturerId], name: "uniqueCourseSessionLecturer")
    @@index([courseSessionId])
    @@index([lecturerId])
    @@map("course_lecturers")
}

model CourseSesnDeptAndLevel {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    level Level

    departmentId    String
    department      Department    @relation(fields: [departmentId], references: [id])
    courseSessionId String
    courseSession   CourseSession @relation(fields: [courseSessionId], references: [id])

    @@unique([courseSessionId, departmentId, level], name: "uniqueCourseSesnDeptAndLevel")
    @@index([courseSessionId])
    @@index([departmentId])
    @@index([level])
    @@map("course_session_dept_levels")
}

model Enrollment {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    status EnrollmentStatus @default(ENROLLED)
    score  Json?

    studentId       String
    student         Student       @relation(fields: [studentId], references: [id])
    courseSessionId String
    courseSession   CourseSession @relation(fields: [courseSessionId], references: [id])

    @@unique([studentId, courseSessionId], name: "uniqueEnrollment")
    @@index([studentId])
    @@index([courseSessionId])
    @@map("enrollments")
}

model File {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())

    filename String
    mimetype String
    size     Int
    path     String
    category FileCategory

    lecturerId String
    lecturer   Lecturer @relation(fields: [lecturerId], references: [id])

    @@index([lecturerId])
    @@index([category])
    @@map("files")
}

model AuditLog {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())

    actorInfo String
    action    String
    entity    String
    entityId  String
    details   Json?

    @@index([entity, entityId])
    @@map("audit_logs")
}
